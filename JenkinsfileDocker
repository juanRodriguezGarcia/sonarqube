pipeline {
    agent {
        dockerfile {
            args '-v /opt/sonar-scanner/:/opt/sonar-scanner/ -v /usr/lib/jvm/java-17-amazon-corretto.x86_64:/usr/lib/jvm/java-17-amazon-corretto.x86_64 --add-host server.sonar:35.153.134.0'
        }
    }
    
    
    environment {
        SONARQUBE_URL = "http://35.153.134.0:9000"  // URL de tu servidor SonarQube
        SONAR_TOKEN = credentials('tokensonar')  // Credenciales de SonarQube
        JAVA_HOME = '/usr/lib/jvm/java-17-amazon-corretto.x86_64'
    }

    stages {
        stage('Checkout CÃ³digo') {
            steps {
                checkout scm  // Clona el repositorio
            }
        }

        stage('Instalar Dependencias y Compilar') {
            steps {
                script {
                    sh 'ls -ltr'  // Instala las dependencias del proyecto Node.js
                    sh 'ls -ltr /usr/lib/jvm/java-17-amazon-corretto.x86_64'
                }
            }
        }

        stage('Ejecutar SonarQube Scan') {
            steps {
                script {
                    
                    echo  "################  BINARIOS ################"
                    sh "ls -ltr /opt/sonar-scanner/bin"
                    // Ejecuta el escaneo de SonarQube dentro del contenedor Docker
                    sh """
                        /opt/sonar-scanner/bin/sonar-scanner \
                        -Dsonar.projectKey=mi-proyecto-dockerfile \
                        -Dsonar.sources=codigo \
                        -Dsonar.host.url=${SONARQUBE_URL} \
                        -Dsonar.login=${SONAR_TOKEN}
                    """
                }
            }
        }
		
		stage('Wait for Quality Gate') {
            steps {
                script {
                    // Esperar el Quality Gate usando la API de SonarQube
                    def sonarApiUrl = "${SONARQUBE_URL}/api/qualitygates/project_status?projectKey=mi-proyecto-dockerfile"
                    def response = sh(script: "curl -u ${SONAR_TOKEN}: ${sonarApiUrl}", returnStdout: true).trim()
                    
                    // Parsear la respuesta JSON
                    def jsonResponse = jsonParse(response)
                    def qualityGateStatus = jsonResponse.projectStatus.status

                    // Verificar el estado del Quality Gate
                    if (qualityGateStatus != 'OK') {
                        error "Quality gate failed: ${qualityGateStatus}"
                    } else {
                        echo "Quality Gate passed!"
                    }
                }
            }
        }
		
    }

    post {
        always {
            // Limpiar el contenedor, si es necesario
            cleanWs()
        }
    }
}